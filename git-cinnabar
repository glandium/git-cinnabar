#!/usr/bin/env python2.7

import logging
import os
import re
import sys
sys.path.append(os.path.join(os.path.dirname(__file__), 'pythonlib'))

import argparse
import hashlib
import platform
import subprocess
import tempfile
import threading
import zipfile
import errno
from StringIO import StringIO
from binascii import hexlify
from cinnabar import VERSION
from cinnabar.githg import (
    ChangesetData,
    git_hash,
    GitCommit,
    GitHgStore,
    HG_EMPTY_FILE,
    one,
    UpgradeException,
)
from cinnabar.dag import gitdag
from cinnabar.git import (
    EMPTY_TREE,
    Git,
    GitProcess,
    NULL_NODE_ID,
)
from cinnabar.util import (
    init_logging,
    progress_enum,
    progress_iter,
    VersionedDict,
)
from cinnabar.helper import GitHgHelper
from cinnabar.hg.bundle import (
    create_bundle,
    get_changes,
    PushStore,
)
from cinnabar.hg import (
    get_repo,
    Remote,
)
from collections import (
    defaultdict,
    OrderedDict,
)


def fsck(args):
    status = {
        'broken': False,
        'fixed': False,
    }

    def info(message):
        sys.stderr.write('\r')
        print message

    def fix(message):
        status['fixed'] = True
        info(message)

    def report(message):
        status['broken'] = True
        info(message)

    try:
        store = GitHgStore()
    except UpgradeException as e:
        print >>sys.stderr, e.message
        return 1

    store.init_fast_import(lazy=True)

    if args.commit:
        all_hg2git = {}
        all_notes = set()
        commits = set()
        all_git_commits = {}

        for c in args.commit:
            data = store.read_changeset_data(c)
            if data:
                all_notes.add(c)
                commits.add(c)
                c = data['changeset']
            commit = GitHgHelper.hg2git(c)
            if commit == NULL_NODE_ID and not data:
                info('Unknown commit or changeset: %s' % c)
                return 1
            if commit != NULL_NODE_ID:
                all_hg2git[c] = commit, 'commit'
            if not data:
                data = store.read_changeset_data(commit)
                commits.add(commit)
                if data:
                    all_notes.add(commit)

        all_git_commits = GitHgHelper.rev_list('--no-walk=unsorted', *commits)
    else:
        all_refs = set(ref for sha1, ref in Git.for_each_ref('refs/cinnabar'))

        if 'refs/cinnabar/manifest' in all_refs:
            all_git_heads = (
                ref for sha1, ref in
                Git.for_each_ref('refs/cinnabar/branches')
            )
            manifests_rev = 'refs/cinnabar/manifest'
            hg2git_rev = 'refs/cinnabar/hg2git'
            notes_rev = 'refs/notes/cinnabar'
        elif 'refs/cinnabar/metadata' in all_refs:
            all_git_heads = ['refs/cinnabar/metadata^1^@']
            manifests_rev = 'refs/cinnabar/metadata^2^@'
            hg2git_rev = 'refs/cinnabar/metadata^3'
            notes_rev = 'refs/cinnabar/metadata^4'
        else:
            assert False

        all_hg2git = {
            path.replace('/', ''): (filesha1, intern(typ))
            for mode, typ, filesha1, path in
            progress_iter('Reading %d mercurial to git mappings',
                          Git.ls_tree(hg2git_rev, recursive=True))
        }

        all_notes = set(path.replace('/', '') for mode, typ, filesha1, path in
                        progress_iter(
                            'Reading %d commit to changeset mappings',
                            Git.ls_tree(notes_rev, recursive=True)))

        manifest_commits = OrderedDict((m, None) for m, t, p in progress_iter(
            'Reading %d manifest trees',
            GitHgHelper.rev_list('--full-history', '--topo-order',
                                 manifests_rev)
        ))

        all_git_commits = GitHgHelper.rev_list(
            '--topo-order', '--full-history', '--reverse', *all_git_heads)

    seen_changesets = set()
    seen_manifests = set()
    seen_files = set()
    seen_notes = set()

    dag = gitdag()
    manifest_dag = gitdag()

    for node, tree, parents in progress_iter('Checking %d changesets',
                                             all_git_commits):
        node = store._replace.get(node, node)
        if node not in all_notes:
            report('Missing note for git commit: ' + node)
            continue
        seen_notes.add(node)

        changeset_data = store.read_changeset_data(node)
        changeset = changeset_data['changeset']
        if 'extra' in changeset_data:
            extra = changeset_data['extra']
            header, message = GitHgHelper.cat_file(
                'commit', node).split('\n\n', 1)
            header = dict(l.split(' ', 1) for l in header.splitlines())
            if 'committer' in extra:
                committer_info = store.hg_author_info(header['committer'])
                committer = '%s %d %d' % committer_info
                if (committer != extra['committer'] and
                        header['committer'] != extra['committer'] and
                        committer_info[0] != extra['committer']):
                    report('Committer mismatch between commit and metadata for'
                           ' changeset %s' % changeset)
                if committer == extra['committer']:
                    report('Useless committer metadata for changeset %s'
                           % changeset)
            if header['committer'] != header['author'] and not extra:
                report('Useless empty extra metadata for changeset %s'
                       % changeset)

        seen_changesets.add(changeset)
        changeset_ref = store.changeset_ref(changeset)
        if not changeset_ref:
            report('Missing changeset in hg2git branch: %s' % changeset)
            continue
        elif str(changeset_ref) != node:
            report('Commit mismatch for changeset %s\n'
                   '  hg2git: %s\n  commit: %s'
                   % (changeset, changeset_ref, node))

        hg_changeset = store.changeset(changeset, include_parents=True)
        if hg_changeset.node != hg_changeset.sha1:
            report('Sha1 mismatch for changeset %s' % changeset)

        dag.add(hg_changeset.node,
                (hg_changeset.parent1, hg_changeset.parent2),
                changeset_data.get('extra', {}).get('branch', 'default'))

        manifest = changeset_data['manifest']
        if manifest in seen_manifests or manifest == NULL_NODE_ID:
            continue
        seen_manifests.add(manifest)
        manifest_ref = store.manifest_ref(manifest)
        if not manifest_ref:
            report('Missing manifest in hg2git branch: %s' % manifest)
        elif (not args.commit and manifest_ref not in manifest_commits):
            report('Missing manifest commit in manifest branch: %s' %
                   manifest_ref)

        parents = tuple(
            store.read_changeset_data(store.changeset_ref(p))['manifest']
            for p in hg_changeset.parents
        )
        git_parents = tuple(store.manifest_ref(p) for p in parents
                            if p != NULL_NODE_ID)

        manifest_dag.add(store.manifest_ref(manifest), git_parents)

        if args.manifests:
            if not GitHgHelper.check_manifest(manifest):
                report('Sha1 mismatch for manifest %s' % manifest)

        manifest_commit = GitCommit(manifest_ref)
        if sorted(manifest_commit.parents) != sorted(git_parents):
            # TODO: better error
            report('%s(%s) %s != %s' % (manifest, manifest_ref,
                                        manifest_commit.parents,
                                        git_parents))

        git_ls = one(Git.ls_tree(manifest_ref, 'git'))
        if git_ls:
            mode, typ, sha1, path = git_ls
        else:
            header, message = GitHgHelper.cat_file(
                'commit', manifest_ref).split('\n\n', 1)
            header = dict(l.split(' ', 1) for l in header.splitlines())
            if header['tree'] == EMPTY_TREE:
                sha1 = EMPTY_TREE
            else:
                report('Missing git tree in manifest commit %s' % manifest_ref)
                sha1 = None
        if sha1 and sha1 != tree:
            report('Tree mismatch between manifest commit %s and commit %s'
                   % (manifest_ref, node))

        if args.files:
            changes = get_changes(manifest_ref, git_parents, 'hg')
            for path, hg_file, hg_fileparents in changes:
                if hg_file != NULL_NODE_ID and hg_file not in seen_files:
                    file = store.file(hg_file, hg_fileparents, git_parents,
                                      path)
                    if file.node != file.sha1:
                        report('Sha1 mismatch for file %s in manifest %s'
                               % (hg_file, manifest_ref))
                    seen_files.add(hg_file)

    if args.files:
        all_hg2git = set(all_hg2git.iterkeys())
    else:
        all_hg2git = set(k for k, (s, t) in all_hg2git.iteritems()
                         if t == 'commit')

    if not args.commit and not status['broken']:
        store_manifest_heads = set(store._manifest_dag.heads())
        manifest_heads = set(manifest_dag.heads())
        if store_manifest_heads != manifest_heads:
            store._manifest_dag = manifest_dag

            def iter_manifests():
                for h in store_manifest_heads - manifest_heads:
                    yield h
                for h in manifest_heads:
                    yield '^%s' % h

            for m, t, p in GitHgHelper.rev_list(
                    '--topo-order', '--full-history', '--reverse',
                    *iter_manifests()):
                fix('Removing metadata commit %s with no corresponding '
                    'changeset' % (m))

            for h in store_manifest_heads - manifest_heads:
                if h in manifest_dag:
                    fix('Removing non-head reference to %s in manifests '
                        'metadata.' % h)
    dangling = ()
    if not status['broken']:
        dangling = all_hg2git - seen_changesets - seen_manifests - seen_files
        if HG_EMPTY_FILE in all_hg2git:
            dangling.add(HG_EMPTY_FILE)
    for obj in dangling:
        fix('Removing dangling metadata for ' + obj)
        # Theoretically, we should figure out if they are files, manifests
        # or changesets and set the right variable accordingly, but in
        # practice, it makes no difference. Reevaluate when GitHgStore.close
        # is modified, though.
        store._files[obj] = None

    if not status['broken']:
        dangling = all_notes - seen_notes
    for c in dangling:
        fix('Removing dangling note for commit ' + c)
        store._changeset_data_cache[c] = None

    if status['broken']:
        info('Your git-cinnabar repository appears to be corrupted. There\n'
             'are known issues in older revisions that have been fixed.\n'
             'Please try running the following command to reset:\n'
             '  git cinnabar reclone\n\n'
             'Please note this command may change the commit sha1s. Your\n'
             'local branches will however stay untouched.\n'
             'Please report any corruption that fsck would detect after a\n'
             'reclone.')

    if not args.commit:
        info('Checking head references...')
        computed_heads = defaultdict(set)
        for branch, head in dag.all_heads():
            computed_heads[branch].add(head)

        for branch in sorted(dag.tags()):
            stored_heads = store.heads({branch})
            for head in computed_heads[branch] - stored_heads:
                fix('Adding missing head %s in branch %s' %
                    (head, branch))
                store.add_head(head)
            for head in stored_heads - computed_heads[branch]:
                fix('Removing non-head reference to %s in branch %s' %
                    (head, branch))
                del store._hgheads[head]

    store.close()

    if status['broken']:
        return 1
    if status['fixed']:
        return 2
    return 0


def do_bundle(fname, *revs):
    bundle_commits = list((c, p) for c, t, p in GitHgHelper.rev_list(
        '--topo-order', '--full-history', '--parents', '--reverse', *revs))
    if bundle_commits:
        # TODO: enable graft support
        # TODO: better UX. For instance, this will fail with an exception when
        # the parent commit doesn't have mercurial metadata.
        store = PushStore()
        store.init_fast_import()
        # TODO: allow to create bundle v2 through command line arguments.
        b2caps = {
            # 'HG20': (),
            # 'changegroup': ('01', '02'),
        }
        with open(fname, 'wb') as fh:
            if not b2caps:
                fh.write('HG10UN')
            for data in create_bundle(store, bundle_commits, b2caps):
                fh.write(data)
        store.close(rollback=True)


def do_rollback(ref):
    sha1 = Git.resolve_ref(ref)
    if not sha1:
        logging.error('Invalid ref: %s', ref)
        return 1
    if sha1 != NULL_NODE_ID:
        # Validate that the sha1 is in the history of the current metadata
        metadata = Git.resolve_ref('refs/cinnabar/metadata')
        while metadata:
            if sha1 == metadata:
                break
            metadata = Git.resolve_ref('%s^5' % metadata)
        if not metadata:
            logging.error('Cannot rollback to %s, it is not in the history of '
                          'the current metadata.', ref)
            return 1

    refs = VersionedDict(
        (ref, commit)
        for commit, ref in Git.for_each_ref('refs/cinnabar',
                                            'refs/notes/cinnabar')
    )
    for ref in refs:
        del refs[ref]
    if sha1 != NULL_NODE_ID:
        refs.update({
            'refs/cinnabar/metadata': sha1,
            'refs/cinnabar/hg2git': Git.resolve_ref('%s^3' % sha1),
            'refs/notes/cinnabar': Git.resolve_ref('%s^4' % sha1),
        })
        for line in Git.ls_tree(sha1):
            mode, typ, commit, path = line
            refs['refs/cinnabar/replace/%s' % path] = commit

    for status, ref, commit in refs.iterchanges():
        if status == VersionedDict.REMOVED:
            Git.delete_ref(ref)
        else:
            Git.update_ref(ref, commit)
    Git.close()

    return 0


def do_fetch(remote, rev):
    if not re.match('[0-9a-f]{40}$', rev.lower()):
        if remote.startswith('hg:'):
            url = remote
        else:
            url = Git.config('remote.%s.url' % remote)
        if not url:
            print >>sys.stderr, "Unknown remote:", remote
            return 1
        if url.startswith('hg::'):
            url = url[4:]
        repo = get_repo(Remote(remote, url))
        if repo.capable('lookup'):
            rev = hexlify(repo.lookup(rev))
        else:
            print >>sys.stderr, (
                'Remote repository does not support the "lookup" command. '
                'Please use a non-abbreviated mercurial revision.')
            return 1

    proc = GitProcess('fetch', remote, 'hg/revs/%s' % rev, stdout=sys.stdout,
                      config={'cinnabar.fetch': rev})
    return proc.wait()


def do_download(args):
    helper = 'git-cinnabar-helper'
    system = args.system
    machine = args.machine
    if system == 'Darwin':
        system = 'macOS'
    elif system == 'Windows':
        helper += '.exe'

    available = (
        ('Linux', 'x86_64'),
        ('macOS', 'x86_64'),
        ('Windows', 'AMD64'),
        ('Windows', 'x86'),
    )

    if args.list:
        for system, machine in available:
            print "%s/%s" % (system, machine)
        return 0

    if (system, machine) not in available:
        print >>sys.stderr, 'No download available for %s/%s' % (system,
                                                                 machine)
        return 1

    if args.dev is False and VERSION.endswith('a'):
        args.dev = ''

    if args.dev is not False:
        h = hashlib.sha1()
        d = os.path.dirname(__file__)
        has_helper_source = False
        for f in sorted(os.listdir(d)):
            if f == 'cinnabar-helper.c':
                has_helper_source = True
            if 'patched' in f:
                continue
            if f.endswith(('.h', '.c', '.c.patch')) or f == 'GIT-VERSION.mk':
                sha1 = git_hash('blob', open(os.path.join(d, f)).read())
                h.update('%s\n' % sha1)

        if not has_helper_source:
            print >>sys.stderr, (
                'Cannot find the right development helper for this '
                'version of git cinnabar.')
            return 1
        system_variant = system
        if args.dev:
            system_variant = '%s-%s' % (system, args.dev.lower())
        url = 'https://s3.amazonaws.com/git-cinnabar/artifacts/%s/%s/%s/%s' % (
            h.hexdigest(), system_variant, machine, helper)
    else:
        if system in ('Windows', 'macOS'):
            ext = 'zip'
        else:
            ext = 'tar.xz'
        REPO_BASE = 'https://github.com/glandium'
        url = '%s/git-cinnabar/releases/download/%s/git-cinnabar.%s.%s.%s' % (
            REPO_BASE, VERSION, system.lower(), machine.lower(), ext)

    if args.url:
        print url
        return 0

    try:
        import requests
    except ImportError:
        print >>sys.stderr, (
            'Downloading the helper requires the `requests` python module.')
        return 1

    if args.output:
        d = os.path.dirname(args.output)
    else:
        d = os.path.dirname(__file__)
        if not os.access(d, os.W_OK):
            d = os.path.join(os.path.expanduser('~'), '.git-cinnabar')
            try:
                os.makedirs(d)
            except:
                pass
            if not os.path.isdir(d):
                print >>sys.stderr, (
                    'Cannot write to either %s or %s.'
                    % (d, os.path.abspath(os.path.dirname(__file__))))
                return 1

    print 'Downloading from %s...' % url
    req = requests.get(url, stream=True)
    if req.status_code != 200:
        # Try again, just in case
        req = requests.get(url, stream=True)
    if req.status_code != 200:
        print >>sys.stderr, (
            'Download failed with status code %d\n' % req.status_code)
        print >>sys.stderr, 'Error body was:\n\n%s' % req.content
        return 1

    size = int(req.headers.get('Content-Length', '0'))

    def progress(iter, size=0):
        def _progress(iter, size):
            read = 0
            for chunk in iter:
                read += len(chunk)
                if size:
                    yield read * 100 / size, chunk
                else:
                    yield read, chunk

        fmt = ' %d%%' if size else ' %d bytes'
        return progress_enum(fmt, _progress(iter, size))

    helper_content = progress(req.iter_content(chunk_size=4096), size)

    if args.dev is False:
        content = StringIO()
        for chunk in helper_content:
            content.write(chunk)

        content.seek(0)

        print 'Extracting %s...' % helper
        if ext == 'zip':
            zip = zipfile.ZipFile(content, 'r')
            info = zip.getinfo('git-cinnabar/%s' % helper)
            helper_content = progress(zip.open(info), info.file_size)
        elif ext == 'tar.xz':
            def tar_extract():
                proc = subprocess.Popen(
                    ['tar', '-JxO', 'git-cinnabar/%s' % helper],
                    stdin=subprocess.PIPE, stdout=subprocess.PIPE)

                def send(stdin, content):
                    stdin.write(content)
                    stdin.close()

                thread = threading.Thread(
                    target=send, args=(proc.stdin, content.getvalue()))
                thread.start()

                chunk = True
                while chunk:
                    chunk = proc.stdout.read(4096)
                    yield chunk
                proc.wait()
                thread.join()

            helper_content = progress(tar_extract())

        else:
            assert False

    fd, path = tempfile.mkstemp(prefix=helper, dir=d)

    success = False
    try:
        for chunk in helper_content:
            os.write(fd, chunk)

        success = True
    finally:
        os.close(fd)
        if success:
            mode = os.stat(path).st_mode
            if args.output:
                helper_path = args.output
            else:
                helper_path = os.path.join(d, helper)
            try:
                # on Windows it's necessary to remove the file first.
                os.remove(helper_path)
            except OSError as exc:
                if exc.errno != errno.ENOENT:
                    raise
                pass
            os.rename(path, helper_path)
            # Add executable bits wherever read bits are set
            mode = mode | ((mode & 0444) >> 2)
            os.chmod(helper_path, mode)

            if not args.no_config:
                Git.run('config', '--global', 'cinnabar.helper',
                        os.path.abspath(helper_path))
        else:
            os.unlink(path)

    return 0


def main(argv):
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='subcommands', dest='command')

    parser.add_argument('--version', action='version', version=VERSION)

    subparser = subparsers.add_parser(
        'data', help='dump the contents of a mercurial revision')
    subparser.add_argument('-c', '--changeset', action='store_true',
                           help='open changelog')
    subparser.add_argument('-m', '--manifest', action='store_true',
                           help='open manifest')
    subparser.add_argument('rev', help='revision')

    subparser = subparsers.add_parser(
        'fsck', help='check cinnabar metadata consistency')
    subparser.add_argument('--manifests', action='store_true',
                           help='Validate manifests hashes')
    subparser.add_argument('--files', action='store_true',
                           help='Validate files hashes')
    subparser.add_argument('commit', nargs='*',
                           help='Specific commit or changeset to check')

    subparser = subparsers.add_parser(
        'reclone', help='reclone all mercurial remotes')

    subparser = subparsers.add_parser(
        'fetch', help='fetch a changeset from a mercurial remote')
    subparser.add_argument('remote', help='mercurial remote name or url')
    subparser.add_argument('rev', help='mercurial changeset to fetch')

    subparser = subparsers.add_parser(
        'hg2git', help='convert mercurial sha1 to corresponding git sha1')
    subparser.add_argument('sha1', nargs='+', help='mercurial sha1')

    subparser = subparsers.add_parser(
        'git2hg', help='convert git sha1 to corresponding mercurial sha1')
    subparser.add_argument('sha1', nargs='+', help='git sha1')

    subparser = subparsers.add_parser(
        'bundle', help='create a mercurial bundle')
    subparser.add_argument('path', help='path of the bundle')
    subparser.add_argument('rev', nargs='+',
                           help='git revision range (see the Specifying Ranges'
                                ' section of gitrevisions(7))')

    subparser = subparsers.add_parser(
        'rollback', help='rollback cinnabar metadata state')
    subparser.add_argument('committish',
                           help='committish of the state to rollback to')

    subparser = subparsers.add_parser(
        'python', help='open a python shell with the cinnabar module in'
                       ' sys.path')

    subparser = subparsers.add_parser(
        'download', help='download a prebuilt helper')
    subparser.add_argument('--url', action='store_true',
                           help='only print the download url')
    subparser.add_argument('--dev', nargs='?', metavar='VARIANT',
                           default=False,
                           help='download the development helper')
    subparser.add_argument('--system', default=platform.system(),
                           help=argparse.SUPPRESS)
    subparser.add_argument('--machine', default=platform.machine(),
                           help=argparse.SUPPRESS)
    subparser.add_argument('-o', '--output', help=argparse.SUPPRESS)
    subparser.add_argument('--no-config', action='store_true',
                           help=argparse.SUPPRESS)
    subparser.add_argument('--list', action='store_true',
                           help=argparse.SUPPRESS)

    # Because argparse.REMAINDER can't be used as first argument without
    # making flags emit a "unrecognized argument" error, get the remainder
    # for the python command with parse_known_args.
    args, leftovers = parser.parse_known_args(argv)
    if args.command != 'python':
        args = parser.parse_args(argv)

    init_logging()

    cmd = args.command
    if cmd == 'data':
        try:
            store = GitHgStore()
        except UpgradeException as e:
            print >>sys.stderr, e.message
            return 1
        if args.changeset and args.manifest:
            print >>sys.stderr, 'Cannot use both -c and -m.'
            return 1
        if not args.changeset and not args.manifest:
            print >>sys.stderr, 'One of -c or -m required.'
            return 1
        if args.changeset:
            sys.stdout.write(store.changeset(args.rev).data)
        elif args.manifest:
            sys.stdout.write(store.manifest(args.rev).data)
        store.close()
    elif cmd == 'fsck':
        return fsck(args)
    elif cmd == 'reclone':
        do_rollback(NULL_NODE_ID)
        for line in Git.iter('config', '--get-regexp', 'remote\..*\.url'):
            config, url = line.split()
            name = config[len('remote.'):-len('.url')]
            skip_pref = 'remote.%s.skipDefaultUpdate' % name
            if (url.startswith(('hg::', 'hg://')) and
                    Git.config(skip_pref) != 'true'):
                Git.run('remote', 'update', '--prune', name)

        print 'Please note that reclone left your local branches untouched.'
        print 'They may be based on entirely different commits.'
    elif cmd == 'hg2git':
        GitHgStore.metadata()
        for arg in args.sha1:
            print GitHgHelper.hg2git(arg)
    elif cmd == 'git2hg':
        GitHgStore.metadata()
        for sha1, ref in Git.for_each_ref('refs/cinnabar/replace'):
            Git._replace[ref[22:]] = sha1
        for arg in args.sha1:
            data = GitHgHelper.git2hg(arg)
            if data:
                data = ChangesetData.parse(data)
                print data.get('changeset', NULL_NODE_ID)
            else:
                print NULL_NODE_ID
    elif cmd == 'bundle':
        return do_bundle(args.path, *args.rev)
    elif cmd == 'rollback':
        return do_rollback(args.committish)
    elif cmd == 'python':
        env = os.environ.copy()
        env['PYTHONPATH'] = os.pathsep.join(sys.path)
        leftovers.append(env)
        os.execle(sys.executable, sys.executable, *leftovers)
    elif cmd == 'fetch':
        return do_fetch(args.remote, args.rev)
    elif cmd == 'download':
        return do_download(args)


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
